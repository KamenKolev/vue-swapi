import { O } from "ts-toolbelt"
import { computed, render } from "vue"

type ColumnDefinition<T extends object> = {
	key: Extract<keyof T, string | number | { toString(): string }>
	label: string
	sorting: "ASC" | "DESC" | null
}

type keyType = JSX.IntrinsicAttributes["key"]

export type TableProps<T extends Record<string, any>> = {
	/**
	 * The table sorts an internal copy of this array
	 */
	values: readonly T[]
	/**
	 * default is "id"
	 */
	// key?: O.SelectKeys<T, string> | undefined
	key?: keyof T
	/**
	 * columns are generated by default
	 * one for each property of the object, label = key
	 */
	columns?: readonly ColumnDefinition<T>[]
}

export default function Table<T extends object>(props: TableProps<T>) {
	const key = computed(() => props.key ?? "id")
	const columns = computed(() => {
		if (props.columns) {
			return props.columns
		}
		if (props.values && props.values.length) {
			const obj = props.values[0]
			return Object.keys(obj).map(
				(key): ColumnDefinition<T> => ({
					// TODO type
					key: ("id" in obj ? "id" : undefined) as any,
					label: key,
					sorting: null,
				}),
			)
		}

		return []
	})

	function sortByCol(col: ColumnDefinition<T>) {
		// TODO
	}

	return (
		<>
			<table>
				{/* TODO */}
				<thead>
					{columns.value.map(col => (
						<th onClick={() => sortByCol(col)}>
							<span>{col.label}</span>
							{col.sorting ? (
								<span>{col.sorting === "ASC" ? "ASC" : "DESC"}</span>
							) : null}
						</th>
					))}
				</thead>
				<tbody>
					{(props.values ?? []).map(value => (
						<tr key={value[key.value as keyof T] as keyType}>
							{columns.value.map(col => (
								<td key={value[col.key] as keyType}>{value[col.key]}</td>
							))}
						</tr>
					))}
				</tbody>
			</table>
		</>
	)

	// render()
}
